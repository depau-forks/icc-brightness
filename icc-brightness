#! /usr/bin/env python3

import argparse
import logging
import os
import shutil
import subprocess
from pathlib import Path
from tempfile import mkdtemp
from typing import Generator, Optional


def clean(except_filename: Optional[str]) -> None:
    """Find all profile generated by us and remove them."""
    out = subprocess.check_output(['colormgr', 'get-profiles'])

    object_path = None
    for line in out.decode('utf8').split('\n'):
        if line.startswith('Object Path:'):
            object_path = line.split(':')[1].lstrip()
            continue
        if line.startswith('Filename:'):
            filename = line.split(':')[1].lstrip()
            if filename.find('/brightness_') < 0:
                continue
            if filename.endswith("/" + except_filename):
                print(f'Skipping {filename}')
                continue
            logging.info(f'Removing: {filename}')
            subprocess.run(['colormgr', 'delete-profile', object_path],
                           check=True)
            os.remove(filename)


def get_object_paths(out) -> Generator[str, None, None]:
    for line in out.decode('utf8').split('\n'):
        if line.startswith('Object Path:'):
            yield line.split(':')[1].lstrip()


def find_profile(filename) -> Optional[str]:
    try:
        out = subprocess.check_output(
            ['colormgr', 'find-profile-by-filename', filename])
    except subprocess.CalledProcessError:
        return None
    return next(get_object_paths(out), None)


def get_device_ids() -> Generator[str, None, None]:
    out = subprocess.check_output(['colormgr', 'get-devices-by-kind',
                                   'display'])
    yield from get_object_paths(out)


def icc_brightness(percent_brightness: int):
    icc_filename = f'brightness_{float(percent_brightness) / 100}.icc'
    logging.debug(f'Apply profile {icc_filename}')
    object_path = find_profile(icc_filename)

    gen_bin = Path(__file__).parent / "icc-brightness-gen"
    if not gen_bin.is_file():
        gen_bin = "icc-brightness-gen"

    for device_id in get_device_ids():
        if object_path is None:
            tempdir = mkdtemp()
            try:
                icc_filepath = os.path.join(tempdir, icc_filename)
                subprocess.run([gen_bin, icc_filepath, str(percent_brightness), "100"], check=True)
                subprocess.check_output(['colormgr', 'import-profile', icc_filepath])
                object_path = find_profile(icc_filename)
            finally:
                shutil.rmtree(tempdir)

        try:
            subprocess.run(['colormgr', 'device-add-profile',
                            device_id, object_path], check=True)
        except subprocess.CalledProcessError as ex:
            logging.warning(f'Failed to add profile: {ex}')

        subprocess.run(['colormgr', 'device-make-profile-default',
                        device_id, object_path], check=True)

    clean(except_filename=icc_filename)


def get_brightness() -> int:
    for device_id in get_device_ids():
        out = subprocess.check_output(['colormgr', 'device-get-default-profile', device_id])
        for line in out.decode('utf8').split('\n'):
            if line.startswith("Title:"):
                title = line.split(':')[1].lstrip()
                if not title.startswith('Brightness '):
                    continue
                return int(float(title.split(' ')[1].strip()) * 100)

    return 100


def constrain(value: int, min_value: int, max_value: int) -> int:
    return min(max(value, min_value), max_value)


def main():
    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)s: %(message)s')

    parser = argparse.ArgumentParser(prog='icc-brightness')
    subparsers = parser.add_subparsers(dest='command', required=True)

    subparsers.add_parser('clean', help='remove all profiles generated by us')

    subparsers.add_parser('get', help='get brightness')

    set_parser = subparsers.add_parser('set', help='set brightness manually')
    set_parser.add_argument('percent', type=str, help='brightness percent (integer or +/-integer)')

    args = parser.parse_args()

    if args.command == 'clean':
        clean()
        return
    elif args.command == 'get':
        print(get_brightness())
        return
    elif args.command == 'set':
        percent = args.percent
        if percent.startswith('+') or percent.startswith('-'):
            percent = constrain(int(percent) + get_brightness(), 0, 100)
        else:
            percent = constrain(int(percent), 0, 100)
        icc_brightness(percent)
        return


if __name__ == '__main__':
    main()
